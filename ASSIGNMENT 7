public class InsertionSort {
void sort(int arr[]) {
int n = arr.length;
for (int i = 1; i < n; ++i) {
int key = arr[i];
int j = i - 1;

while (j >= 0 && arr[j] > key) {
arr[j + 1] = arr[j];
j = j - 1;
}
arr[j + 1] = key;
}
}

static void printArray(int arr[]) {
int n = arr.length;
for (int i = 0; i < n; ++i)
System.out.print(arr[i] + " ");
System.out.println();
}

public static void main(String args[]) {
int arr[] = {12, 11, 13, 5, 6};
InsertionSort ob = new InsertionSort();
ob.sort(arr);
printArray(arr);
}
}

**Bubble Sort Implementation:**


public class BubbleSort {
void bubbleSort(int arr[]) {
int n = arr.length;
for (int i = 0; i < n - 1; i++)
for (int j = 0; j < n - i - 1; j++)
if (arr[j] > arr[j + 1]) {

int temp = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = temp;
}
}

void printArray(int arr[]) {
int n = arr.length;
for (int i = 0; i < n; ++i)
System.out.print(arr[i] + " ");
System.out.println();
}

public static void main(String args[]) {
BubbleSort bs = new BubbleSort();
int arr[] = {64, 34, 25, 12, 22, 11, 90};
bs.bubbleSort(arr);
System.out.println("Sorted array");
bs.printArray(arr);
}

Selection Sort Implementation:


public class SelectionSort {
void sort(int arr[]) {
int n = arr.length;


for (int i = 0; i < n - 1; i++) {

int min_idx = i;
for (int j = i + 1; j < n; j++)
if (arr[j] < arr[min_idx])
min_idx = j;


int temp = arr[min_idx];
arr[min_idx] = arr[i];
arr[i] = temp;
}
}


void printArray(int arr[]) {
int n = arr.length;
for (int i=0; i System.out.print(arr[i]+" ");
System.out.println();
}


public static void main(String args[]) {
SelectionSort ob = new SelectionSort();
int arr[] = {64,25,12,22,11};
ob.sort(arr);
System.out.println("Sorted array");
ob.printArray(arr);
}
]

public class Main {
public static void main(String[] args) {
int arr1[] = {64, 34, 25, 12, 22, 11, 90};
int arr2[] = arr1.clone();
int arr3[] = arr1.clone();

// Bubble Sort
BubbleSort bs = new BubbleSort();
long startTime = System.nanoTime();
bs.bubbleSort(arr1);
long endTime = System.nanoTime();
long timeElapsed = endTime - startTime;
System.out.println("Execution time in nanoseconds for Bubble Sort: " + timeElapsed);

// Selection Sort
SelectionSort ss = new SelectionSort();
startTime = System.nanoTime();
ss.sort(arr2);
endTime = System.nanoTime();
timeElapsed = endTime - startTime;
System.out.println("Execution time in nanoseconds for Selection Sort: " + timeElapsed);

// Insertion Sort
InsertionSort is = new InsertionSort();
startTime = System.nanoTime();
is.sort(arr3);
endTime = System.nanoTime();
timeElapsed = endTime - startTime;
System.out.println("Execution time in nanoseconds for Insertion Sort: " + timeElapsed);
}
}
